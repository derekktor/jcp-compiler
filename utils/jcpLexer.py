# Generated from jcp.g4 by ANTLR 4.10.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,67,493,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,
        65,7,65,2,66,7,66,2,67,7,67,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,
        1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,
        1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,
        1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,
        1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,13,1,13,
        1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,
        1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,
        1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,
        1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,
        1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,
        1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,
        1,27,1,28,1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,30,1,31,1,31,1,31,
        1,32,1,32,1,33,1,33,1,33,1,34,1,34,1,34,1,35,1,35,1,36,1,36,1,36,
        1,37,1,37,1,38,1,38,1,38,1,39,1,39,1,40,1,40,1,41,1,41,1,42,1,42,
        1,43,1,43,1,44,1,44,1,45,1,45,1,46,1,46,1,47,1,47,1,48,1,48,1,49,
        1,49,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,51,1,51,1,51,1,51,
        1,51,1,52,1,52,1,52,1,52,1,52,1,52,1,53,1,53,1,53,1,53,1,53,1,54,
        1,54,1,54,1,54,1,55,1,55,1,55,1,55,1,55,1,56,1,56,1,56,1,56,1,56,
        1,56,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,58,1,58,1,58,1,58,3,58,
        405,8,58,1,59,4,59,408,8,59,11,59,12,59,409,1,60,4,60,413,8,60,11,
        60,12,60,414,1,60,1,60,4,60,419,8,60,11,60,12,60,420,1,60,3,60,424,
        8,60,1,61,1,61,1,61,5,61,429,8,61,10,61,12,61,432,9,61,1,61,1,61,
        1,62,1,62,1,62,1,62,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,
        3,63,449,8,63,1,64,4,64,452,8,64,11,64,12,64,453,1,64,5,64,457,8,
        64,10,64,12,64,460,9,64,1,65,4,65,463,8,65,11,65,12,65,464,1,65,
        1,65,1,66,1,66,1,66,1,66,5,66,473,8,66,10,66,12,66,476,9,66,1,66,
        1,66,1,67,1,67,1,67,1,67,5,67,484,8,67,10,67,12,67,487,9,67,1,67,
        1,67,1,67,1,67,1,67,1,485,0,68,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,
        8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,
        19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,
        30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,
        41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,101,51,
        103,52,105,53,107,54,109,55,111,56,113,57,115,58,117,0,119,59,121,
        60,123,61,125,62,127,63,129,64,131,65,133,66,135,67,1,0,7,1,0,48,
        57,4,0,10,10,13,13,34,34,92,92,1,0,39,39,3,0,65,90,95,95,97,122,
        4,0,48,57,65,90,95,95,97,122,3,0,9,10,13,13,32,32,1,0,10,10,504,
        0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,
        1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,
        1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,
        1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,
        1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,
        1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,
        1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,
        1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,
        1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,
        1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,
        1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,
        0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,119,1,0,0,0,0,121,1,
        0,0,0,0,123,1,0,0,0,0,125,1,0,0,0,0,127,1,0,0,0,0,129,1,0,0,0,0,
        131,1,0,0,0,0,133,1,0,0,0,0,135,1,0,0,0,1,137,1,0,0,0,3,145,1,0,
        0,0,5,152,1,0,0,0,7,158,1,0,0,0,9,165,1,0,0,0,11,173,1,0,0,0,13,
        183,1,0,0,0,15,191,1,0,0,0,17,197,1,0,0,0,19,202,1,0,0,0,21,209,
        1,0,0,0,23,212,1,0,0,0,25,217,1,0,0,0,27,221,1,0,0,0,29,227,1,0,
        0,0,31,230,1,0,0,0,33,236,1,0,0,0,35,245,1,0,0,0,37,252,1,0,0,0,
        39,259,1,0,0,0,41,264,1,0,0,0,43,271,1,0,0,0,45,290,1,0,0,0,47,292,
        1,0,0,0,49,294,1,0,0,0,51,296,1,0,0,0,53,298,1,0,0,0,55,300,1,0,
        0,0,57,302,1,0,0,0,59,305,1,0,0,0,61,308,1,0,0,0,63,311,1,0,0,0,
        65,314,1,0,0,0,67,316,1,0,0,0,69,319,1,0,0,0,71,322,1,0,0,0,73,324,
        1,0,0,0,75,327,1,0,0,0,77,329,1,0,0,0,79,332,1,0,0,0,81,334,1,0,
        0,0,83,336,1,0,0,0,85,338,1,0,0,0,87,340,1,0,0,0,89,342,1,0,0,0,
        91,344,1,0,0,0,93,346,1,0,0,0,95,348,1,0,0,0,97,350,1,0,0,0,99,352,
        1,0,0,0,101,354,1,0,0,0,103,362,1,0,0,0,105,367,1,0,0,0,107,373,
        1,0,0,0,109,378,1,0,0,0,111,382,1,0,0,0,113,387,1,0,0,0,115,393,
        1,0,0,0,117,404,1,0,0,0,119,407,1,0,0,0,121,412,1,0,0,0,123,425,
        1,0,0,0,125,435,1,0,0,0,127,448,1,0,0,0,129,451,1,0,0,0,131,462,
        1,0,0,0,133,468,1,0,0,0,135,479,1,0,0,0,137,138,5,112,0,0,138,139,
        5,97,0,0,139,140,5,99,0,0,140,141,5,107,0,0,141,142,5,97,0,0,142,
        143,5,103,0,0,143,144,5,101,0,0,144,2,1,0,0,0,145,146,5,105,0,0,
        146,147,5,109,0,0,147,148,5,112,0,0,148,149,5,111,0,0,149,150,5,
        114,0,0,150,151,5,116,0,0,151,4,1,0,0,0,152,153,5,99,0,0,153,154,
        5,108,0,0,154,155,5,97,0,0,155,156,5,115,0,0,156,157,5,115,0,0,157,
        6,1,0,0,0,158,159,5,112,0,0,159,160,5,117,0,0,160,161,5,98,0,0,161,
        162,5,108,0,0,162,163,5,105,0,0,163,164,5,99,0,0,164,8,1,0,0,0,165,
        166,5,112,0,0,166,167,5,114,0,0,167,168,5,105,0,0,168,169,5,118,
        0,0,169,170,5,97,0,0,170,171,5,116,0,0,171,172,5,101,0,0,172,10,
        1,0,0,0,173,174,5,112,0,0,174,175,5,114,0,0,175,176,5,111,0,0,176,
        177,5,116,0,0,177,178,5,101,0,0,178,179,5,99,0,0,179,180,5,116,0,
        0,180,181,5,101,0,0,181,182,5,100,0,0,182,12,1,0,0,0,183,184,5,101,
        0,0,184,185,5,120,0,0,185,186,5,116,0,0,186,187,5,101,0,0,187,188,
        5,110,0,0,188,189,5,100,0,0,189,190,5,115,0,0,190,14,1,0,0,0,191,
        192,5,115,0,0,192,193,5,117,0,0,193,194,5,112,0,0,194,195,5,101,
        0,0,195,196,5,114,0,0,196,16,1,0,0,0,197,198,5,116,0,0,198,199,5,
        104,0,0,199,200,5,105,0,0,200,201,5,115,0,0,201,18,1,0,0,0,202,203,
        5,110,0,0,203,204,5,101,0,0,204,205,5,119,0,0,205,206,5,32,0,0,206,
        207,1,0,0,0,207,208,6,9,0,0,208,20,1,0,0,0,209,210,5,105,0,0,210,
        211,5,102,0,0,211,22,1,0,0,0,212,213,5,101,0,0,213,214,5,108,0,0,
        214,215,5,115,0,0,215,216,5,101,0,0,216,24,1,0,0,0,217,218,5,102,
        0,0,218,219,5,111,0,0,219,220,5,114,0,0,220,26,1,0,0,0,221,222,5,
        119,0,0,222,223,5,104,0,0,223,224,5,105,0,0,224,225,5,108,0,0,225,
        226,5,101,0,0,226,28,1,0,0,0,227,228,5,100,0,0,228,229,5,111,0,0,
        229,30,1,0,0,0,230,231,5,98,0,0,231,232,5,114,0,0,232,233,5,101,
        0,0,233,234,5,97,0,0,234,235,5,107,0,0,235,32,1,0,0,0,236,237,5,
        99,0,0,237,238,5,111,0,0,238,239,5,110,0,0,239,240,5,116,0,0,240,
        241,5,105,0,0,241,242,5,110,0,0,242,243,5,117,0,0,243,244,5,101,
        0,0,244,34,1,0,0,0,245,246,5,114,0,0,246,247,5,101,0,0,247,248,5,
        116,0,0,248,249,5,117,0,0,249,250,5,114,0,0,250,251,5,110,0,0,251,
        36,1,0,0,0,252,253,5,115,0,0,253,254,5,116,0,0,254,255,5,97,0,0,
        255,256,5,116,0,0,256,257,5,105,0,0,257,258,5,99,0,0,258,38,1,0,
        0,0,259,260,5,118,0,0,260,261,5,111,0,0,261,262,5,105,0,0,262,263,
        5,100,0,0,263,40,1,0,0,0,264,265,5,108,0,0,265,266,5,101,0,0,266,
        267,5,110,0,0,267,268,5,103,0,0,268,269,5,116,0,0,269,270,5,104,
        0,0,270,42,1,0,0,0,271,272,5,83,0,0,272,273,5,121,0,0,273,274,5,
        115,0,0,274,275,5,116,0,0,275,276,5,101,0,0,276,277,5,109,0,0,277,
        278,5,46,0,0,278,279,5,111,0,0,279,280,5,117,0,0,280,281,5,116,0,
        0,281,282,5,46,0,0,282,283,5,112,0,0,283,284,5,114,0,0,284,285,5,
        105,0,0,285,286,5,110,0,0,286,287,5,116,0,0,287,288,5,108,0,0,288,
        289,5,110,0,0,289,44,1,0,0,0,290,291,5,61,0,0,291,46,1,0,0,0,292,
        293,5,43,0,0,293,48,1,0,0,0,294,295,5,45,0,0,295,50,1,0,0,0,296,
        297,5,42,0,0,297,52,1,0,0,0,298,299,5,47,0,0,299,54,1,0,0,0,300,
        301,5,37,0,0,301,56,1,0,0,0,302,303,5,43,0,0,303,304,5,43,0,0,304,
        58,1,0,0,0,305,306,5,45,0,0,306,307,5,45,0,0,307,60,1,0,0,0,308,
        309,5,124,0,0,309,310,5,124,0,0,310,62,1,0,0,0,311,312,5,38,0,0,
        312,313,5,38,0,0,313,64,1,0,0,0,314,315,5,33,0,0,315,66,1,0,0,0,
        316,317,5,61,0,0,317,318,5,61,0,0,318,68,1,0,0,0,319,320,5,33,0,
        0,320,321,5,61,0,0,321,70,1,0,0,0,322,323,5,60,0,0,323,72,1,0,0,
        0,324,325,5,60,0,0,325,326,5,61,0,0,326,74,1,0,0,0,327,328,5,62,
        0,0,328,76,1,0,0,0,329,330,5,62,0,0,330,331,5,61,0,0,331,78,1,0,
        0,0,332,333,5,46,0,0,333,80,1,0,0,0,334,335,5,44,0,0,335,82,1,0,
        0,0,336,337,5,59,0,0,337,84,1,0,0,0,338,339,5,58,0,0,339,86,1,0,
        0,0,340,341,5,63,0,0,341,88,1,0,0,0,342,343,5,123,0,0,343,90,1,0,
        0,0,344,345,5,125,0,0,345,92,1,0,0,0,346,347,5,40,0,0,347,94,1,0,
        0,0,348,349,5,41,0,0,349,96,1,0,0,0,350,351,5,91,0,0,351,98,1,0,
        0,0,352,353,5,93,0,0,353,100,1,0,0,0,354,355,5,98,0,0,355,356,5,
        111,0,0,356,357,5,111,0,0,357,358,5,108,0,0,358,359,5,101,0,0,359,
        360,5,97,0,0,360,361,5,110,0,0,361,102,1,0,0,0,362,363,5,98,0,0,
        363,364,5,121,0,0,364,365,5,116,0,0,365,366,5,101,0,0,366,104,1,
        0,0,0,367,368,5,115,0,0,368,369,5,104,0,0,369,370,5,111,0,0,370,
        371,5,114,0,0,371,372,5,116,0,0,372,106,1,0,0,0,373,374,5,108,0,
        0,374,375,5,111,0,0,375,376,5,110,0,0,376,377,5,103,0,0,377,108,
        1,0,0,0,378,379,5,105,0,0,379,380,5,110,0,0,380,381,5,116,0,0,381,
        110,1,0,0,0,382,383,5,99,0,0,383,384,5,104,0,0,384,385,5,97,0,0,
        385,386,5,114,0,0,386,112,1,0,0,0,387,388,5,102,0,0,388,389,5,108,
        0,0,389,390,5,111,0,0,390,391,5,97,0,0,391,392,5,116,0,0,392,114,
        1,0,0,0,393,394,5,100,0,0,394,395,5,111,0,0,395,396,5,117,0,0,396,
        397,5,98,0,0,397,398,5,108,0,0,398,399,5,101,0,0,399,116,1,0,0,0,
        400,401,5,92,0,0,401,405,5,34,0,0,402,403,5,92,0,0,403,405,5,92,
        0,0,404,400,1,0,0,0,404,402,1,0,0,0,405,118,1,0,0,0,406,408,7,0,
        0,0,407,406,1,0,0,0,408,409,1,0,0,0,409,407,1,0,0,0,409,410,1,0,
        0,0,410,120,1,0,0,0,411,413,7,0,0,0,412,411,1,0,0,0,413,414,1,0,
        0,0,414,412,1,0,0,0,414,415,1,0,0,0,415,416,1,0,0,0,416,418,5,46,
        0,0,417,419,7,0,0,0,418,417,1,0,0,0,419,420,1,0,0,0,420,418,1,0,
        0,0,420,421,1,0,0,0,421,423,1,0,0,0,422,424,5,102,0,0,423,422,1,
        0,0,0,423,424,1,0,0,0,424,122,1,0,0,0,425,430,5,34,0,0,426,429,3,
        117,58,0,427,429,8,1,0,0,428,426,1,0,0,0,428,427,1,0,0,0,429,432,
        1,0,0,0,430,428,1,0,0,0,430,431,1,0,0,0,431,433,1,0,0,0,432,430,
        1,0,0,0,433,434,5,34,0,0,434,124,1,0,0,0,435,436,5,39,0,0,436,437,
        8,2,0,0,437,438,5,39,0,0,438,126,1,0,0,0,439,440,5,116,0,0,440,441,
        5,114,0,0,441,442,5,117,0,0,442,449,5,101,0,0,443,444,5,102,0,0,
        444,445,5,97,0,0,445,446,5,108,0,0,446,447,5,115,0,0,447,449,5,101,
        0,0,448,439,1,0,0,0,448,443,1,0,0,0,449,128,1,0,0,0,450,452,7,3,
        0,0,451,450,1,0,0,0,452,453,1,0,0,0,453,451,1,0,0,0,453,454,1,0,
        0,0,454,458,1,0,0,0,455,457,7,4,0,0,456,455,1,0,0,0,457,460,1,0,
        0,0,458,456,1,0,0,0,458,459,1,0,0,0,459,130,1,0,0,0,460,458,1,0,
        0,0,461,463,7,5,0,0,462,461,1,0,0,0,463,464,1,0,0,0,464,462,1,0,
        0,0,464,465,1,0,0,0,465,466,1,0,0,0,466,467,6,65,0,0,467,132,1,0,
        0,0,468,469,5,47,0,0,469,470,5,47,0,0,470,474,1,0,0,0,471,473,8,
        6,0,0,472,471,1,0,0,0,473,476,1,0,0,0,474,472,1,0,0,0,474,475,1,
        0,0,0,475,477,1,0,0,0,476,474,1,0,0,0,477,478,6,66,0,0,478,134,1,
        0,0,0,479,480,5,47,0,0,480,481,5,42,0,0,481,485,1,0,0,0,482,484,
        9,0,0,0,483,482,1,0,0,0,484,487,1,0,0,0,485,486,1,0,0,0,485,483,
        1,0,0,0,486,488,1,0,0,0,487,485,1,0,0,0,488,489,5,42,0,0,489,490,
        5,47,0,0,490,491,1,0,0,0,491,492,6,67,0,0,492,136,1,0,0,0,14,0,404,
        409,414,420,423,428,430,448,453,458,464,474,485,1,6,0,0
    ]

class jcpLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    PACKAGE = 1
    IMPORT = 2
    CLASS = 3
    PUBLIC = 4
    PRIVATE = 5
    PROTECTED = 6
    EXTENDS = 7
    SUPER = 8
    THIS = 9
    NEW = 10
    IF = 11
    ELSE = 12
    FOR = 13
    WHILE = 14
    DO = 15
    BREAK = 16
    CONTINUE = 17
    RETURN = 18
    STATIC = 19
    VOID = 20
    LENGHT = 21
    SOUT = 22
    ASSIGN = 23
    PLUS = 24
    MINUS = 25
    MULTIPLY = 26
    DIVIDE = 27
    MOD = 28
    INCREMENT = 29
    DECREMENT = 30
    OR = 31
    AND = 32
    NOT = 33
    EQUAL = 34
    NOTEQUAL = 35
    LESS = 36
    LESSEQUAL = 37
    GREATER = 38
    GREATEREQUAL = 39
    DOT = 40
    COMMA = 41
    SEMI = 42
    COLON = 43
    QUESTION = 44
    LCUR = 45
    RCUR = 46
    LPAR = 47
    RPAR = 48
    LBRACK = 49
    RBRACK = 50
    BOOL = 51
    BYTE = 52
    SHORT = 53
    LONG = 54
    INT = 55
    CHAR = 56
    FLOAT = 57
    DOUBLE = 58
    INT_LITERAL = 59
    FLOAT_LITERAL = 60
    STRING_LITERAL = 61
    CHAR_LITERAL = 62
    BOOL_LITERAL = 63
    IDENTIFIER = 64
    WS = 65
    COMMENTSIMPLE = 66
    COMMENTMULTI = 67

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'package'", "'import'", "'class'", "'public'", "'private'", 
            "'protected'", "'extends'", "'super'", "'this'", "'new '", "'if'", 
            "'else'", "'for'", "'while'", "'do'", "'break'", "'continue'", 
            "'return'", "'static'", "'void'", "'length'", "'System.out.println'", 
            "'='", "'+'", "'-'", "'*'", "'/'", "'%'", "'++'", "'--'", "'||'", 
            "'&&'", "'!'", "'=='", "'!='", "'<'", "'<='", "'>'", "'>='", 
            "'.'", "','", "';'", "':'", "'?'", "'{'", "'}'", "'('", "')'", 
            "'['", "']'", "'boolean'", "'byte'", "'short'", "'long'", "'int'", 
            "'char'", "'float'", "'double'" ]

    symbolicNames = [ "<INVALID>",
            "PACKAGE", "IMPORT", "CLASS", "PUBLIC", "PRIVATE", "PROTECTED", 
            "EXTENDS", "SUPER", "THIS", "NEW", "IF", "ELSE", "FOR", "WHILE", 
            "DO", "BREAK", "CONTINUE", "RETURN", "STATIC", "VOID", "LENGHT", 
            "SOUT", "ASSIGN", "PLUS", "MINUS", "MULTIPLY", "DIVIDE", "MOD", 
            "INCREMENT", "DECREMENT", "OR", "AND", "NOT", "EQUAL", "NOTEQUAL", 
            "LESS", "LESSEQUAL", "GREATER", "GREATEREQUAL", "DOT", "COMMA", 
            "SEMI", "COLON", "QUESTION", "LCUR", "RCUR", "LPAR", "RPAR", 
            "LBRACK", "RBRACK", "BOOL", "BYTE", "SHORT", "LONG", "INT", 
            "CHAR", "FLOAT", "DOUBLE", "INT_LITERAL", "FLOAT_LITERAL", "STRING_LITERAL", 
            "CHAR_LITERAL", "BOOL_LITERAL", "IDENTIFIER", "WS", "COMMENTSIMPLE", 
            "COMMENTMULTI" ]

    ruleNames = [ "PACKAGE", "IMPORT", "CLASS", "PUBLIC", "PRIVATE", "PROTECTED", 
                  "EXTENDS", "SUPER", "THIS", "NEW", "IF", "ELSE", "FOR", 
                  "WHILE", "DO", "BREAK", "CONTINUE", "RETURN", "STATIC", 
                  "VOID", "LENGHT", "SOUT", "ASSIGN", "PLUS", "MINUS", "MULTIPLY", 
                  "DIVIDE", "MOD", "INCREMENT", "DECREMENT", "OR", "AND", 
                  "NOT", "EQUAL", "NOTEQUAL", "LESS", "LESSEQUAL", "GREATER", 
                  "GREATEREQUAL", "DOT", "COMMA", "SEMI", "COLON", "QUESTION", 
                  "LCUR", "RCUR", "LPAR", "RPAR", "LBRACK", "RBRACK", "BOOL", 
                  "BYTE", "SHORT", "LONG", "INT", "CHAR", "FLOAT", "DOUBLE", 
                  "ESC", "INT_LITERAL", "FLOAT_LITERAL", "STRING_LITERAL", 
                  "CHAR_LITERAL", "BOOL_LITERAL", "IDENTIFIER", "WS", "COMMENTSIMPLE", 
                  "COMMENTMULTI" ]

    grammarFileName = "jcp.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


